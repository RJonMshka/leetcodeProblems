// 138. Copy List with Random Pointer

import java.util.HashMap;
import java.util.Map;

public class LC138 {

    // Definition for a Node.
    class Node {
        int val;
        Node next;
        Node random;

        public Node(int val) {
            this.val = val;
            this.next = null;
            this.random = null;
        }
    }

    private void createNodeMap(Map<Node, Node> nodeMap, Node originalNode) {
        if(originalNode == null) {
            return;
        }
        Node newNode = new Node(originalNode.val);
        nodeMap.put(originalNode, newNode);
        this.createNodeMap(nodeMap, originalNode.next);
    }

    public Node copyRandomList(Node head) {
        if(head == null) {
            return null;
        }
        Map<Node, Node> nodeMap = new HashMap<>();

        this.createNodeMap(nodeMap, head);

        Node current = head;

        while(current != null) {
            Node nextNode = current.next;
            Node randomNode = current.random;
            Node newCurrentNode = nodeMap.get(current);

            if(nextNode != null && nodeMap.containsKey(nextNode)) {
                newCurrentNode.next = nodeMap.get(nextNode);
            }

            if(randomNode != null && nodeMap.containsKey(randomNode)) {
                newCurrentNode.random = nodeMap.get(randomNode);
            }

            current = current.next;
        }

        return nodeMap.get(head);
    }
}
